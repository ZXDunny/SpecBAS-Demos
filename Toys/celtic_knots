ZXASCII
AUTO -1
PROG demos:toys/celtic_knots
CHANGED FALSE
10 DIM rule$="ABCDDD HHAKKANNN AANBNC DD",
           " DDDEFGDFGDEG XX GGXZXYXYZ",
           " NN XX NPQNOQNOPQQQTTVVXXX",
           "AAA GGGAJJAMM QQQRSQSQR GG":
     exit$="25282827262624373634373634"+
           "57656545151548184818471717":
 DIM d(8,3):
 for f=1 to 8:
    read d(f,1),d(f,2),d(f,3):
 next f:
 data -1,-1,8,0,-1,7,1,-1,6,-1,0,5,1,0,4,-1,1,3,0,1,2,1,1,1
20 font new fnt,20,20,0:
 addr=code "A"*400:
 for i=0 to 51:
    read d$: l$="":
    for j=1 to 49 step 2:
       l$=l$+lpad$(bin$(val("$"+mid$(d$,j,2))),"0",8):
    next j:
    for j=addr to addr+199:
       poke fnt,j,val l$(j-addr+1):
    next j:
    addr+=len l$:
 next i:
 font fnt
30 i=int(rnd*4)+12,p=int(rnd*4):
 paper p: ink i: cls 0:

 gw,gh=(int(rnd*9)+2)*2,
 cx=(scrw-gw*20)/2,cy=((scrh-gh*20)/2)-40:
 dim g(gw,gh),g$(gh):
 g$(1)="N"+"VO"*(gw/2-1)+"X":
 for y=2 to gh-1 step 2:
    g$(y)="B"+("IU"*((gw/2)-1))+"F",
    g$(y+1)="K"+("WL"*((gw/2)-1))+"Y":
 next y:
 g$(gh)="A"+"JS"*(gw/2-1)+"G":

 sym=int(rnd*3),rs=int(rnd*2)*(gw>4):
 if sym=0 then
    limx=gw-1,limy=gh/2-rs
 else
    if sym=1 then
       limx=gw/2-rs,limy=gh-1
    else
       if sym=2 then
          limx=gw/2-rs,limy=gh/2-rs
40 for y=1 to limy:
    for x=1+odd y to limx step 2
50       k=int(rnd*5),kx=x,ky=y:
       if k=1 or k=2 then
          GO SUb 90:
          if sym=0 then
             ky=gh-ky:
             if rs then kx=gw-kx: end if:
             GO SUB 90:
          else
             if sym=1 then
                kx=gw-kx:
                if rs then ky=gh-ky: end if:
                GO SUb 90:
             else
                ky=gh-ky:
                GO SUb 90:
                kx=gw-kx:
                GO SUb 90:
                ky=gh-ky:
                GO SUb 90:
             END IF:
          end if:
       end if:
    next x:
 next y
60 GO SUB 80:
 rectangle ink i-8;cx-4,cy+16,gw*20+8,gh*20+8 fill:
 font fnt:
 FOR y=1 TO gh:
    TEXT move cx,cy+(y*20);g$(y):
 NEXT y:
 GO SUb 110:
 fill ink i-8;cx-4,cy+16
70 font 1:
 print paper 0; ink 15; centre txth-3;"Press any key":
 wait screen: pause 0:
 GO To 30
80 For x=1 to gw:
    for y=1 to gh:
       for n=0 to 3:
          if g(x,y) & 2^n<>0 then
             g$(y,x)=rule$(n+1)(code g$(y,x)-64):
          end if:
       next n:
    next y:
 next x:
 return
90 if k=1 then
    g(kx,ky)|=8,g(kx+1,ky)|=8,
    g(kx,ky+1)|=4,g(kx+1,ky+1)|=4:
 else
    if k=2 then
       g(kx,ky)|=2,g(kx+1,ky)|=1,
       g(kx,ky+1)|=2,g(kx+1,ky+1)|=1
100 return
110 for x=1 to gw:
    for y=1 to gh:
       g(x,y)=(x=1 and y=1)*i:
    next y:
 next x:
 x,y,sx,sy=1,pin,mi=0:
 dim ip(7)
120 kx=x,ky=y:GO SUb 170:
 if sym=0 then
    ky=gh-y+1:
    if rs then kx=gw-x+1: end if:
    GO SUb 170:
 else
    if sym=1 then
       kx=gw-x+1:
       if rs then ky=gh-y+1: end if:
       GO SUB 170:
    else
       kx=x,
       ky=gh-y+1:  GO SUb 170:
       kx=gw-kx+1: GO SUb 170:
       ky=gh-ky+1: GO SUb 170:
    END IF:
130 e=(code g$(y,x)-64)*2-1,e$=exit$(e to e+1),e=val e$(1):
 if e<>pin then
    x+=d(e,1),y+=d(e,2)
 else
    e=val e$(2):
    x+=d(e,1),y+=d(e,2)
140 IF x<>sx or y<>sy THEN
    pin=d(e,3):
    GO To 120
150 sx+=1:
 if sx>gw then
    sx=1:
    sy+=1:
    if sy>gh then
       mx,i=0:
       for f=1 to 7:
          if ip(f)>mx then
             mx=ip(f),i=f:
          end if:
       next f:
       i+=8:
       return
160 IF g(sx,sy)>0 THEN
    GO To 150
 else
    x=sx,y=sy,i=iif(i<15,i+1,12):
    GO To 120
170 fill ink i;cx+kx*20-10,cy+ky*20+10:
 g(kx,ky)=i,ip(i-8)+=1:
 return
180 DATA "0FFF80FFF80FFFC0FFFF0FFFF0FFFF0FFFF0FFFF0FFFF0FFFF",
      "0FFFF07FFF07FFF03FFF01FFF007FF00000000000000000000"
190 DATA "0FFF80FFF80FFFC0FFFC0FFFC07FFC07FFE07FFE07FFF03FFF",
      "03FFF03FFF01FFF01FFF00FFF00FFF007FF007FF003FF003FF"
200 DATA "0FFF80FFF80FFFC0FFFC0FFFC07FFE07FFE07FFE07FFC03FF8",
      "03FF003FE101FC301F8700F0F00E1F0043F0007F000FF001FF"
210 DATA "0FFF80FFF80FFF80FFF80FFF80FFF80FFF80FFF80FFF80FFF8",
      "0FFF80FFF80FFF80FFF80FFF80FFF80FFF80FFF80FFF80FFF8"
220 DATA "0FFF81FFF81FFF81FFF81FFF03FFF03FFF03FFF07FFF07FFE0",
      "FFFE0FFFE0FFFC0FFFC0FFF80FFF80FFF00FFF00FFE00FFC00"
230 DATA "0FFF80FFF81FFF81FFF81FFF03FFF03FFF03FFF01FFF00FFE0",
      "87FE0C3FE0E1FC0F0FC0F8780FC380FE100FF000FF800FFC00"
240 DATA "0FFF80FFF81FFF8FFFF8FFFF8FFFF8FFFF8FFFF8FFFF8FFFF8",
      "FFFF8FFFF0FFFF0FFFE0FFFC0FFF0000000000000000000000"
250 DATA "003FF003FF007FF007FF00FFF00FFF01FFF01FFF03FFF03FFF",
      "03FFF07FFF07FFE07FFE07FFC0FFFC0FFFC0FFFC0FFF80FFF8"
260 DATA "003FF007FF00FFF01FFF03FFF07FFF0FFFF1FFFF1FFFF0FFFF",
      "87FFEC3FFCE1FF8F0FF0F87E0FC3C0FE180FF000FF800FFC00"
270 DATA "007FF03FFF1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
      "FFFFEFFFF8FFFE0FFF80FFC00FC00000000000000000000000"
280 DATA "001FF000FF0047F00E3F00F1F01F8F01FC703FE303FF103FF8",
      "07FFC07FFE07FFE07FFE0FFFC0FFFC0FFFC0FFF80FFF80FFF8"
290 DATA "001FF000FF00C7F01E3F03F1F07F8F0FFC71FFE33FFF17FFF8",
      "FFFFCFFFFCFFFF8FFFF0FFFE0FFFC0FFF80FFF00FFE00FFC00"
300 DATA "001FF038FF1FC7FFFE3FFFF1FFFF8FFFFC7FFFE3FFFF1FFFF8",
      "FFFFCFFFF8FFFE0FFF80FFC00FC00000000000000000000000"
310 DATA "000000000000000007FF01FFF03FFF07FFF07FFF0FFFF0FFFF",
      "0FFFF0FFFF0FFFF0FFFF0FFFF0FFFF0FFFC0FFF80FFF80FFF8"
320 DATA "0000000000000000000F001FF00FFF03FFF0FFFF3FFFF7FFFF",
      "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFE0FFF00FFC00"
330 DATA "0000000000000000000F001FF00FFF03FFF0FFFF1FFFF0FFFF",
      "87FFFC3FFFE1FFFF0FFFF87FFFC3FFFE1FCFF0E0FF800FFC00"
340 DATA "000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
      "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000"
350 DATA "FFF00FFFC0FFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
      "3FFFF0FFFF03FFF00FFF001FF0001F00000000000000000000"
360 DATA "FF800FF0E0FE1FCFC3FFF87FFF0FFFE1FFFC3FFF87FFF0FFFF",
      "1FFFF0FFFF03FFF00FFF001FF0001F00000000000000000000"
370 DATA "000000000000000F8000FFC00FFF80FFFE0FFFF8FFFFEFFFFF",
      "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFFF03FFF007FF003FF"
380 DATA "FF800FF000FE180FC3C0F87E0F0FF0E1FF8C3FFC87FFE0FFFF",
      "1FFFF3FFFF1FFFF0FFFF07FFF03FFF01FFF00FFF007FF003FF"
390 DATA "000000000000000F8000FFC00FFF80FFFE0FFFF8FFFFCFFFF8",
      "FFFF0FFFE1FFFC3FFF87FFF0FFFE1F1FC3F0387F000FF001FF"
400 DATA "FFE00FFF00FFF80FFFC0FFFE0FFFF0FFFF8FFFFCFFFFCFFFF8",
      "7FFF03FFE11FFC30FF8707F0F03E1F01C3F0087F000FF001FF"
410 DATA "000000000000000FFF00FFFC0FFFE0FFFF0FFFF0FFFF8FFFF8",
      "FFFF8FFFF8FFFF8FFFF8FFFF8FFFF81FFF80FFF80FFF80FFF8"
420 DATA "FFE00FFF00FFF00FFF80FFF80FFFC0FFFC0FFFE0FFFE0FFFE0",
      "7FFF03FFF03FFF03FFF01FFF01FFF81FFF81FFF80FFF80FFF8"
430 DATA "FF800FF000FE100FC380F8780F0FC0E1FC0C3FE087FE00FFE0",
      "1FFF03FFF03FFF03FFF01FFF01FFF81FFF80FFF80FFF80FFF8"
